// <auto-generated>
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"abc\",\"Name\":\"HelloQ\"},\"Attributes\":[],\"SourceFile\":\"c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs\",\"Position\":{\"Item1\":7,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":17}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"abc\",\"Name\":\"HelloQ\"},\"Attributes\":[],\"SourceFile\":\"c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs\",\"Position\":{\"Item1\":9,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":1},\"Item2\":{\"Line\":1,\"Column\":5}},\"Documentation\":[]}")]
#line hidden
namespace abc
{
    [SourceLocation("c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs", OperationFunctor.Body, 10, -1)]
    public partial class HelloQ : Operation<QVoid, QVoid>, ICallable
    {
        public HelloQ(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "HelloQ";
        String ICallable.FullName => "abc.HelloQ";
        protected ICallable<Int64, String> MicrosoftQuantumExtensionsConvertToStringI
        {
            get;
            set;
        }

        protected Allocate Allocate
        {
            get;
            set;
        }

        protected IUnitary<Qubit> MicrosoftQuantumIntrinsicH
        {
            get;
            set;
        }

        protected ICallable<Qubit, Result> MicrosoftQuantumIntrinsicM
        {
            get;
            set;
        }

        protected ICallable<String, QVoid> MicrosoftQuantumIntrinsicMessage
        {
            get;
            set;
        }

        protected Release Release
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> MicrosoftQuantumIntrinsicResetAll
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> Body => (__in__) =>
        {
#line 12 "c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs"
            var countZeros = 0L;
#line 13 "c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs"
            var countOnes = 0L;
#line 15 "c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs"
            foreach (var iter in new QRange(1L, 100000L))
#line hidden
            {
#line hidden
                {
#line 17 "c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs"
                    var qubits = Allocate.Apply(1L);
#line hidden
                    System.Runtime.ExceptionServices.ExceptionDispatchInfo __arg1__ = null;
                    try
                    {
#line 20 "c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs"
                        MicrosoftQuantumIntrinsicH.Apply(qubits[0L]);
#line 22 "c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs"
                        var result = MicrosoftQuantumIntrinsicM.Apply(qubits[0L]);
#line 23 "c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs"
                        if ((result == Result.Zero))
                        {
#line 24 "c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs"
                            countZeros = (countZeros + 1L);
                        }

#line 27 "c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs"
                        if ((result == Result.One))
                        {
#line 28 "c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs"
                            countOnes = (countOnes + 1L);
                        }

#line 31 "c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs"
                        MicrosoftQuantumIntrinsicResetAll.Apply(qubits);
                    }
#line hidden
                    catch (Exception __arg2__)
                    {
                        __arg1__ = System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(__arg2__);
                        throw;
                    }
#line hidden
                    finally
                    {
                        if (__arg1__ != null)
                        {
                            __arg1__.Throw();
                        }

#line hidden
                        Release.Apply(qubits);
                    }
                }
            }

#line 40 "c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs"
            MicrosoftQuantumIntrinsicMessage.Apply((" countZeros " + MicrosoftQuantumExtensionsConvertToStringI.Apply(countZeros)));
#line 41 "c:/Users/gsw/Documents/Github/quantum_computing_learning/abc/Operations.qs"
            MicrosoftQuantumIntrinsicMessage.Apply((" countOnes " + MicrosoftQuantumExtensionsConvertToStringI.Apply(countOnes)));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void Init()
        {
            this.MicrosoftQuantumExtensionsConvertToStringI = this.Factory.Get<ICallable<Int64, String>>(typeof(Microsoft.Quantum.Extensions.Convert.ToStringI));
            this.Allocate = this.Factory.Get<Allocate>(typeof(Microsoft.Quantum.Intrinsic.Allocate));
            this.MicrosoftQuantumIntrinsicH = this.Factory.Get<IUnitary<Qubit>>(typeof(Microsoft.Quantum.Intrinsic.H));
            this.MicrosoftQuantumIntrinsicM = this.Factory.Get<ICallable<Qubit, Result>>(typeof(Microsoft.Quantum.Intrinsic.M));
            this.MicrosoftQuantumIntrinsicMessage = this.Factory.Get<ICallable<String, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.Message));
            this.Release = this.Factory.Get<Release>(typeof(Microsoft.Quantum.Intrinsic.Release));
            this.MicrosoftQuantumIntrinsicResetAll = this.Factory.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __dataIn(QVoid data) => data;
        public override IApplyData __dataOut(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<HelloQ, QVoid, QVoid>(QVoid.Instance);
        }
    }
}